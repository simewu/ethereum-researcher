https://arvanaghi.com/blog/testing-smart-contracts-on-a-private-blockchain-with-Geth/




https://arvanaghi.com/blog/how-to-set-up-a-private-ethereum-blockchain-using-geth/

./build/bin/geth account new
	Give the account a password
	It'll create an account to ~/.ethereum/keystore

./build/bin/geth account list
	Account #0: {e5b1d3c993d6f7eed2aba899244f261799f2b099} keystore:///home/ubuntu1/.ethereum/keystore/UTC--2022-02-04T09-30-21.552342704Z--e5b1d3c993d6f7eed2aba899244f261799f2b099

	From this, we want /home/ubuntu1/.ethereum/keystore/UTC--2022-02-04T09-30-21.552342704Z--e5b1d3c993d6f7eed2aba899244f261799f2b099


Create genesis.json in your current directory, add these contents:
Insert YOUR_WALLET_ADDRESS below, it grants you the full market cap:

// genesis.json
{
 "config": {
   "chainID": 1234,
   "homesteadBlock": 0,
   "eip155Block": 0,
   "eip158Block": 0
 },
 "alloc": {
    "0xYOUR_WALLET_ADDRESS": {
      "balance": "100000000000000000000000000000"
    }
 },
 "difficulty": "0x4000",
 "gasLimit": "0xffffffff",
 "nonce": "0x0000000000000000",
 "coinbase": "0x0000000000000000000000000000000000000000",
 "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
 "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
 "extraData": "0x123458db4e347b1234537c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
 "timestamp": "0x00"
}


./build/bin/geth -datadir "/home/ubuntu1/Desktop/eth_node_1" init "/home/ubuntu1/Desktop/eth_node_1/genesis.json"
./build/bin/geth -datadir "/home/ubuntu1/Desktop/eth_node_2" init "/home/ubuntu1/Desktop/eth_node_2/genesis.json"

NOT

./build/bin/geth --datadir "~/Desktop/geth_node_1" init genesis.json
./build/bin/geth --datadir "~/Desktop/geth_node_2" init genesis.json
	Without datadir it would store the blockchain in ~/.ethereum


tempdontusethisyet ./build/bin/geth --datadir "~/Desktop/geth_node_1" --keystore "" --networkid 1234 --port 11111 --nodiscover console

./build/bin/geth --datadir "~/Desktop/geth_node_1" --networkid 1234 --port 11111 --nodiscover console
	Launch the console!
	The networkid must match the "chainID" from the genesis.json
	Using nodiscover means it'll be offline and isolated from the network

./build/bin/geth --datadir "~/Desktop/geth_node_2" --networkid 1234 --port 11112 --nodiscover console



ON NODE 2, MAKE AN ACCOUNT
	personal.newAccount(" ")
	eth.coinbase now returns a result



From the first node, let's transfer over our rich account:
cp ~/.ethereum/keystore/UTC--<rest of wallet file's name> ~/Desktop/LocalNode1/keystore/

INSTEAD DO THIS:
./build/bin/geth --datadir "~/Desktop/geth_node_1" --keystore "~/.ethereum/keystore" --networkid 1234 --port 11111 --nodiscover console

In the first node's console:
personal.listWallets

personal.listAccounts


web3.fromWei(eth.getBalance(eth.accounts[0]), "ether");






Now let's connect the peers:

On node 1:
	admin.nodeInfo.enode
		"enode://b125cf1b09e102f69b875bd6d1bd38f9579a4c930f36e864fd9b8306e11b659bb7200e278593b588ced6ce23d38611b2049a6f9a6741f9433309210040fd7ef1@127.0.0.1:11111?discport=0"

On node 2:
	admin.addPeer("enode://b125cf1b09e102f69b875bd6d1bd38f9579a4c930f36e864fd9b8306e11b659bb7200e278593b588ced6ce23d38611b2049a6f9a6741f9433309210040fd7ef1@127.0.0.1:11111?discport=0")


admin.peers
net.peerCount



On node 2:
eth.coinbase
	Gives error, so
miner.setEtherbase(eth.accounts[0])



miner.start()
miner.stop()
	Waits until the process is done before stopping




Create attackContract.sol

	pragma solidity >=0.5.16 <0.9.0;

	contract forkBomb {
	    function begin() public {
	        begin();
	        begin();
	    }
	}


sudo snap install solc

solc -o target --bin --abi attackContract.sol

	We now have files in the target/ folder

	Contract binary:
	6080604052348015600f57600080fd5b5060788061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80631bce6ff314602d575b600080fd5b60336035565b005b603b6035565b60416035565b56fea265627a7a723158209913f5df45d45f5e0deee0b558d03abd8d2096095f90c1dfeb77b822e16a786964736f6c63430005100032

	ABI file:
	[{"constant":false,"inputs":[],"name":"begin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]


From node 1 console:

	attackHex = "0x6080604052348015600f57600080fd5b5060788061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80631bce6ff314602d575b600080fd5b60336035565b005b603b6035565b60416035565b56fea265627a7a723158209913f5df45d45f5e0deee0b558d03abd8d2096095f90c1dfeb77b822e16a786964736f6c63430005100032"

	attackAbi = [{"constant":false,"inputs":[],"name":"begin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]

	attackInterface = eth.contract(attackAbi)



	personal.unlockAccount(eth.accounts[0])

	var attackTx = attackInterface.new(
	  "Prepare to crash!",
	  {
	    from: eth.accounts[0],
	    data: attackHex,
	    gas: 1000000
	  }
	)

	eth.sendTransaction({eth.accounts[0], to:"0x123456", value: "0x1", gas: "0x5208", gasPrice: "0x4A817C800"});

	attackTxHash = attackTx.transactionHash


	txpool.status




var myContract = eth.contract(attackAbi).at(contractAddress);
var result = myContract.forkBomb.call({from:myAddress, gas:1000000})
                     var result = myContract.forkBomb.call(arg1,arg2,arg3,{from:myAddress, gas:1000000})




No private node terminoligy in Ethereum?
Are transactions executed on the node we connect to?
